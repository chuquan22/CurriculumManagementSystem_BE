// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(CMSDbContext))]
    [Migration("20231103024801_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.AssessmentMethod", b =>
                {
                    b.Property<int>("assessment_method_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assessment_method_id"), 1L, 1);

                    b.Property<string>("assessment_method_component")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("assessment_type_id")
                        .HasColumnType("int");

                    b.HasKey("assessment_method_id");

                    b.HasIndex("assessment_type_id");

                    b.ToTable("AssessmentMethod");

                    b.HasData(
                        new
                        {
                            assessment_method_id = 1,
                            assessment_method_component = "Lab",
                            assessment_type_id = 3
                        },
                        new
                        {
                            assessment_method_id = 2,
                            assessment_method_component = "Quiz",
                            assessment_type_id = 3
                        },
                        new
                        {
                            assessment_method_id = 3,
                            assessment_method_component = "Assignment",
                            assessment_type_id = 3
                        },
                        new
                        {
                            assessment_method_id = 4,
                            assessment_method_component = "Bài học online",
                            assessment_type_id = 3
                        },
                        new
                        {
                            assessment_method_id = 5,
                            assessment_method_component = "Lab",
                            assessment_type_id = 3
                        },
                        new
                        {
                            assessment_method_id = 6,
                            assessment_method_component = "Bảo vệ assignment",
                            assessment_type_id = 4
                        },
                        new
                        {
                            assessment_method_id = 7,
                            assessment_method_component = "Quiz",
                            assessment_type_id = 3
                        },
                        new
                        {
                            assessment_method_id = 8,
                            assessment_method_component = "Đánh giá Assignment GĐ 1",
                            assessment_type_id = 3
                        });
                });

            modelBuilder.Entity("BusinessObject.AssessmentType", b =>
                {
                    b.Property<int>("assessment_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assessment_type_id"), 1L, 1);

                    b.Property<string>("assessment_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("assessment_type_id");

                    b.ToTable("AssessmentType");

                    b.HasData(
                        new
                        {
                            assessment_type_id = 1,
                            assessment_type_name = "Online"
                        },
                        new
                        {
                            assessment_type_id = 2,
                            assessment_type_name = "ORIT"
                        },
                        new
                        {
                            assessment_type_id = 3,
                            assessment_type_name = "On-going"
                        },
                        new
                        {
                            assessment_type_id = 4,
                            assessment_type_name = "Final Exam"
                        });
                });

            modelBuilder.Entity("BusinessObject.Batch", b =>
                {
                    b.Property<int>("batch_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("batch_id"), 1L, 1);

                    b.Property<string>("batch_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("batch_id");

                    b.ToTable("Batch");

                    b.HasData(
                        new
                        {
                            batch_id = 1,
                            batch_name = "7.1"
                        },
                        new
                        {
                            batch_id = 2,
                            batch_name = "17"
                        },
                        new
                        {
                            batch_id = 3,
                            batch_name = "18"
                        },
                        new
                        {
                            batch_id = 4,
                            batch_name = "19.1"
                        },
                        new
                        {
                            batch_id = 5,
                            batch_name = "19.2"
                        },
                        new
                        {
                            batch_id = 6,
                            batch_name = "19.3"
                        });
                });

            modelBuilder.Entity("BusinessObject.ClassSessionType", b =>
                {
                    b.Property<int>("class_session_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("class_session_type_id"), 1L, 1);

                    b.Property<string>("class_session_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("class_session_type_id");

                    b.ToTable("ClassSessionType");

                    b.HasData(
                        new
                        {
                            class_session_type_id = 1,
                            class_session_type_name = "Online"
                        },
                        new
                        {
                            class_session_type_id = 2,
                            class_session_type_name = "Offline"
                        },
                        new
                        {
                            class_session_type_id = 3,
                            class_session_type_name = "ORIT"
                        });
                });

            modelBuilder.Entity("BusinessObject.CLO", b =>
                {
                    b.Property<int>("CLO_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CLO_id"), 1L, 1);

                    b.Property<string>("CLO_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CLO_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.HasKey("CLO_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("CLO");
                });

            modelBuilder.Entity("BusinessObject.Combo", b =>
                {
                    b.Property<int>("combo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("combo_id"), 1L, 1);

                    b.Property<string>("combo_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("combo_english_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("combo_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("specialization_id")
                        .HasColumnType("int");

                    b.HasKey("combo_id");

                    b.HasIndex("specialization_id");

                    b.ToTable("Combo");

                    b.HasData(
                        new
                        {
                            combo_id = 1,
                            combo_code = ".NET",
                            combo_english_name = "C# Programing",
                            combo_name = "Lập trình C#",
                            is_active = true,
                            specialization_id = 4
                        },
                        new
                        {
                            combo_id = 2,
                            combo_code = "JS",
                            combo_english_name = "Japan Software",
                            combo_name = "kĩ sư Nhật Bản",
                            is_active = true,
                            specialization_id = 3
                        },
                        new
                        {
                            combo_id = 3,
                            combo_code = "KS",
                            combo_english_name = "Korea Software",
                            combo_name = "kĩ sư Hàn Quốc",
                            is_active = false,
                            specialization_id = 2
                        },
                        new
                        {
                            combo_id = 4,
                            combo_code = "NodeJS",
                            combo_english_name = "Web api using NodeJS",
                            combo_name = "Lập trình NodeJS",
                            is_active = true,
                            specialization_id = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.ComboCurriculum", b =>
                {
                    b.Property<int>("combo_id")
                        .HasColumnType("int");

                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.HasKey("combo_id", "curriculum_id");

                    b.HasIndex("curriculum_id");

                    b.ToTable("ComboCurriculum");
                });

            modelBuilder.Entity("BusinessObject.Curriculum", b =>
                {
                    b.Property<int>("curriculum_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("curriculum_id"), 1L, 1);

                    b.Property<string>("Formality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("approved_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("batch_id")
                        .HasColumnType("int");

                    b.Property<string>("curriculum_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("curriculum_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("curriculum_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("decision_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("english_curriculum_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("specialization_id")
                        .HasColumnType("int");

                    b.Property<int>("total_semester")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("curriculum_id");

                    b.HasIndex("batch_id");

                    b.HasIndex("specialization_id");

                    b.ToTable("Curriculum");

                    b.HasData(
                        new
                        {
                            curriculum_id = 1,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 1,
                            curriculum_code = "GD-IED-CD-18.1",
                            curriculum_description = "",
                            curriculum_name = "Thiết kế đồ họa",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Graphic Design",
                            is_active = true,
                            specialization_id = 1,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 2,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 4,
                            curriculum_code = "GD-IED-IC-19.1",
                            curriculum_description = "",
                            curriculum_name = "Thiết kế mĩ thuật số",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Graphic Design",
                            is_active = true,
                            specialization_id = 1,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 3,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 3,
                            curriculum_code = "SE-SE-IC-18.3",
                            curriculum_description = "",
                            curriculum_name = "kĩ sư phần mềm",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Software Engineering",
                            is_active = true,
                            specialization_id = 4,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 4,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 2,
                            curriculum_code = "SE-SE-CD-18.2",
                            curriculum_description = "",
                            curriculum_name = "kĩ thuật phần mềm",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Software Engineering",
                            is_active = true,
                            specialization_id = 4,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 5,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 3,
                            curriculum_code = "CM-FMA-TC-18.3",
                            curriculum_description = "",
                            curriculum_name = "quản lí học liệu",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Curriculum Management",
                            is_active = true,
                            specialization_id = 2,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 6,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 3,
                            curriculum_code = "SS-IED-TC-18.3",
                            curriculum_description = "",
                            curriculum_name = "kĩ năng mềm",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Soft Skill",
                            is_active = true,
                            specialization_id = 1,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 7,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 2,
                            curriculum_code = "SWP-WP-TC-18.2",
                            curriculum_description = "",
                            curriculum_name = "kĩ năng lập trình web",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Skill Web Program",
                            is_active = false,
                            specialization_id = 5,
                            total_semester = 7
                        },
                        new
                        {
                            curriculum_id = 8,
                            Formality = "formal education",
                            approved_date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 3,
                            curriculum_code = "SS-IED-TC-18.3",
                            curriculum_description = "",
                            curriculum_name = "kĩ năng mềm",
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Soft Skill",
                            is_active = true,
                            specialization_id = 1,
                            total_semester = 7
                        });
                });

            modelBuilder.Entity("BusinessObject.CurriculumSubject", b =>
                {
                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.Property<int?>("combo_id")
                        .HasColumnType("int");

                    b.Property<bool>("option")
                        .HasColumnType("bit");

                    b.Property<string>("subject_group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("term_no")
                        .HasColumnType("int");

                    b.HasKey("curriculum_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("CurriculumSubject");

                    b.HasData(
                        new
                        {
                            curriculum_id = 1,
                            subject_id = 1,
                            combo_id = 1,
                            option = false,
                            subject_group = "General Subject",
                            term_no = 3
                        },
                        new
                        {
                            curriculum_id = 1,
                            subject_id = 3,
                            combo_id = 2,
                            option = true,
                            subject_group = "Option Subject",
                            term_no = 3
                        },
                        new
                        {
                            curriculum_id = 2,
                            subject_id = 4,
                            combo_id = 0,
                            option = false,
                            subject_group = "Specialization Subject",
                            term_no = 3
                        },
                        new
                        {
                            curriculum_id = 1,
                            subject_id = 5,
                            combo_id = 0,
                            option = false,
                            subject_group = "Basic Subject",
                            term_no = 2
                        },
                        new
                        {
                            curriculum_id = 1,
                            subject_id = 2,
                            combo_id = 3,
                            option = true,
                            subject_group = "Option Subject",
                            term_no = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.DegreeLevel", b =>
                {
                    b.Property<int>("degree_level_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("degree_level_id"), 1L, 1);

                    b.Property<string>("degree_level_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("degree_level_english_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("degree_level_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("degree_level_id");

                    b.ToTable("DegreeLevel");

                    b.HasData(
                        new
                        {
                            degree_level_id = 1,
                            degree_level_code = "CD",
                            degree_level_english_name = "Associate Degree",
                            degree_level_name = "Cao Đẳng"
                        },
                        new
                        {
                            degree_level_id = 2,
                            degree_level_code = "IC",
                            degree_level_english_name = "International Associate Degree",
                            degree_level_name = "Cao Đẳng Quốc Tế"
                        },
                        new
                        {
                            degree_level_id = 3,
                            degree_level_code = "TC",
                            degree_level_english_name = "Vocational Secondary",
                            degree_level_name = "Trung Cấp Nghề"
                        });
                });

            modelBuilder.Entity("BusinessObject.GradingCLO", b =>
                {
                    b.Property<int>("grading_id")
                        .HasColumnType("int");

                    b.Property<int>("CLO_id")
                        .HasColumnType("int");

                    b.HasKey("grading_id", "CLO_id");

                    b.HasIndex("CLO_id");

                    b.ToTable("GradingCLO");
                });

            modelBuilder.Entity("BusinessObject.GradingStruture", b =>
                {
                    b.Property<int>("grading_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("grading_id"), 1L, 1);

                    b.Property<int>("assessment_method_id")
                        .HasColumnType("int");

                    b.Property<string>("clo_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("grading_duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("grading_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("grading_part")
                        .HasColumnType("int");

                    b.Property<decimal>("grading_weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("how_granding_structure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("minimum_value_to_meet_completion")
                        .HasColumnType("int");

                    b.Property<string>("number_of_questions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("references")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scope_knowledge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("session_no")
                        .HasColumnType("int");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.Property<string>("type_of_questions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("grading_id");

                    b.HasIndex("assessment_method_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("GradingStruture");
                });

            modelBuilder.Entity("BusinessObject.LearningMethod", b =>
                {
                    b.Property<int>("learning_method_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("learning_method_id"), 1L, 1);

                    b.Property<string>("learning_method_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("learning_method_id");

                    b.ToTable("LearningMethod");

                    b.HasData(
                        new
                        {
                            learning_method_id = 1,
                            learning_method_name = "Online Learing"
                        },
                        new
                        {
                            learning_method_id = 2,
                            learning_method_name = "Balence"
                        });
                });

            modelBuilder.Entity("BusinessObject.LearningResource", b =>
                {
                    b.Property<int>("learning_resource_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("learning_resource_id"), 1L, 1);

                    b.Property<string>("learning_resource_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("learning_resource_id");

                    b.ToTable("LearningResource");

                    b.HasData(
                        new
                        {
                            learning_resource_id = 1,
                            learning_resource_type = "Lab"
                        },
                        new
                        {
                            learning_resource_id = 2,
                            learning_resource_type = "Assessment"
                        });
                });

            modelBuilder.Entity("BusinessObject.Major", b =>
                {
                    b.Property<int>("major_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("major_id"), 1L, 1);

                    b.Property<int>("degree_level_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("major_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("major_english_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("major_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("major_id");

                    b.HasIndex("degree_level_id");

                    b.ToTable("Major");

                    b.HasData(
                        new
                        {
                            major_id = 1,
                            degree_level_id = 1,
                            is_active = true,
                            major_code = "6210402",
                            major_english_name = "Graphic Design",
                            major_name = "Thiết kế đồ họa"
                        },
                        new
                        {
                            major_id = 2,
                            degree_level_id = 2,
                            is_active = true,
                            major_code = "6215642",
                            major_english_name = "Information technology",
                            major_name = "Công nghệ thông tin"
                        },
                        new
                        {
                            major_id = 3,
                            degree_level_id = 1,
                            is_active = true,
                            major_code = "6516427",
                            major_english_name = "Business Administration",
                            major_name = "Quản trị kinh doanh"
                        },
                        new
                        {
                            major_id = 4,
                            degree_level_id = 3,
                            is_active = true,
                            major_code = "6318672",
                            major_english_name = "Automation Engineering",
                            major_name = "Kỹ thuật tự động hóa"
                        });
                });

            modelBuilder.Entity("BusinessObject.Material", b =>
                {
                    b.Property<int>("material_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("material_id"), 1L, 1);

                    b.Property<int>("learning_resource_id")
                        .HasColumnType("int");

                    b.Property<string>("material_ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("material_published_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("material_publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.HasKey("material_id");

                    b.HasIndex("learning_resource_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("BusinessObject.PLOMapping", b =>
                {
                    b.Property<int>("PLO_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("PLO_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("PLOMapping");

                    b.HasData(
                        new
                        {
                            PLO_id = 2,
                            subject_id = 3
                        },
                        new
                        {
                            PLO_id = 1,
                            subject_id = 2
                        },
                        new
                        {
                            PLO_id = 1,
                            subject_id = 3
                        },
                        new
                        {
                            PLO_id = 1,
                            subject_id = 4
                        },
                        new
                        {
                            PLO_id = 2,
                            subject_id = 4
                        });
                });

            modelBuilder.Entity("BusinessObject.PLOs", b =>
                {
                    b.Property<int>("PLO_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PLO_id"), 1L, 1);

                    b.Property<string>("PLO_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PLO_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.HasKey("PLO_id");

                    b.HasIndex("curriculum_id");

                    b.ToTable("PLOs");

                    b.HasData(
                        new
                        {
                            PLO_id = 1,
                            PLO_description = "Thiết kế xử lý hình ảnh, xây dựng các sản phẩm đồ họa 2D",
                            PLO_name = "PLO01",
                            curriculum_id = 1
                        },
                        new
                        {
                            PLO_id = 2,
                            PLO_description = "Thiết kế theo các chủ đề: xây dựng thương hiệu, ấn phẩm quảng cáo, bao bì",
                            PLO_name = "PLO02",
                            curriculum_id = 1
                        },
                        new
                        {
                            PLO_id = 3,
                            PLO_description = "Biên tập, kịch bản và xử lý kỹ xảo phim, phim quảng cáo, phim quảng cáo 3D",
                            PLO_name = "PLO03",
                            curriculum_id = 1
                        },
                        new
                        {
                            PLO_id = 4,
                            PLO_description = "Thiết kếm xây dưng các sản phẩm đồ họa nội ngoại thất 2D&3D hoặc các sản phẩm đồ họa 3D",
                            PLO_name = "PLO04",
                            curriculum_id = 1
                        },
                        new
                        {
                            PLO_id = 5,
                            PLO_description = "Kiến thức về đường, hình, khối và một số vấn đề mỹ thuật liên quan; kiến thức cơ bản về đồ họa; kiến thức cơ sở về mỹ thuật, thẩm mỹ; vật liệu,...",
                            PLO_name = "PLO05",
                            curriculum_id = 1
                        },
                        new
                        {
                            PLO_id = 6,
                            PLO_description = "Giao tiếp, tìm hiểu, nắm bắt nhu cầu của khách hàng, tư vấn cho khách hàng, làm được sản phẩm theo yêu cầu của khách hàng",
                            PLO_name = "PLO06",
                            curriculum_id = 1
                        },
                        new
                        {
                            PLO_id = 7,
                            PLO_description = "Giao tiếp, thuyết trình tự tin trước đám đông",
                            PLO_name = "PLO07",
                            curriculum_id = 2
                        },
                        new
                        {
                            PLO_id = 8,
                            PLO_description = "Kĩ năng làm việc nhóm",
                            PLO_name = "PLO08",
                            curriculum_id = 2
                        });
                });

            modelBuilder.Entity("BusinessObject.PreRequisite", b =>
                {
                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.Property<int>("pre_subject_id")
                        .HasColumnType("int");

                    b.Property<int>("pre_requisite_type_id")
                        .HasColumnType("int");

                    b.HasKey("subject_id", "pre_subject_id");

                    b.HasIndex("pre_requisite_type_id");

                    b.HasIndex("pre_subject_id");

                    b.ToTable("PreRequisite");

                    b.HasData(
                        new
                        {
                            subject_id = 1,
                            pre_subject_id = 2,
                            pre_requisite_type_id = 1
                        },
                        new
                        {
                            subject_id = 2,
                            pre_subject_id = 3,
                            pre_requisite_type_id = 2
                        },
                        new
                        {
                            subject_id = 3,
                            pre_subject_id = 5,
                            pre_requisite_type_id = 3
                        },
                        new
                        {
                            subject_id = 4,
                            pre_subject_id = 7,
                            pre_requisite_type_id = 4
                        },
                        new
                        {
                            subject_id = 5,
                            pre_subject_id = 8,
                            pre_requisite_type_id = 1
                        },
                        new
                        {
                            subject_id = 10,
                            pre_subject_id = 12,
                            pre_requisite_type_id = 1
                        },
                        new
                        {
                            subject_id = 11,
                            pre_subject_id = 14,
                            pre_requisite_type_id = 2
                        },
                        new
                        {
                            subject_id = 15,
                            pre_subject_id = 17,
                            pre_requisite_type_id = 3
                        });
                });

            modelBuilder.Entity("BusinessObject.PreRequisiteType", b =>
                {
                    b.Property<int>("pre_requisite_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pre_requisite_type_id"), 1L, 1);

                    b.Property<string>("pre_requisite_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pre_requisite_type_id");

                    b.ToTable("PreRequisiteType");

                    b.HasData(
                        new
                        {
                            pre_requisite_type_id = 1,
                            pre_requisite_type_name = "Corequisite"
                        },
                        new
                        {
                            pre_requisite_type_id = 2,
                            pre_requisite_type_name = "Prerequisite"
                        },
                        new
                        {
                            pre_requisite_type_id = 3,
                            pre_requisite_type_name = "Recommended"
                        },
                        new
                        {
                            pre_requisite_type_id = 4,
                            pre_requisite_type_name = "Elective"
                        });
                });

            modelBuilder.Entity("BusinessObject.Question", b =>
                {
                    b.Property<int>("question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("question_id"), 1L, 1);

                    b.Property<string>("answers_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answers_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answers_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answers_4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("correct_answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quiz_id")
                        .HasColumnType("int");

                    b.HasKey("question_id");

                    b.HasIndex("quiz_id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("BusinessObject.Quiz", b =>
                {
                    b.Property<int>("quiz_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("quiz_id"), 1L, 1);

                    b.Property<string>("quiz_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("quiz_id");

                    b.HasIndex("subject_id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"), 1L, 1);

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("role_id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            role_id = 1,
                            role_name = "Dispatcher"
                        },
                        new
                        {
                            role_id = 2,
                            role_name = "Manager"
                        },
                        new
                        {
                            role_id = 3,
                            role_name = "Admin"
                        });
                });

            modelBuilder.Entity("BusinessObject.Semester", b =>
                {
                    b.Property<int>("semester_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("semester_id"), 1L, 1);

                    b.Property<int>("batch_id")
                        .HasColumnType("int");

                    b.Property<int>("degree_level_id")
                        .HasColumnType("int");

                    b.Property<int>("school_year")
                        .HasColumnType("int");

                    b.Property<DateTime>("semester_end_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("semester_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("semester_start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("semester_id");

                    b.HasIndex("batch_id");

                    b.HasIndex("degree_level_id");

                    b.ToTable("Semester");

                    b.HasData(
                        new
                        {
                            semester_id = 1,
                            batch_id = 6,
                            degree_level_id = 1,
                            school_year = 2023,
                            semester_end_date = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            semester_name = "Fall",
                            semester_start_date = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            semester_id = 2,
                            batch_id = 5,
                            degree_level_id = 1,
                            school_year = 2023,
                            semester_end_date = new DateTime(2023, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            semester_name = "Summer",
                            semester_start_date = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            semester_id = 3,
                            batch_id = 4,
                            degree_level_id = 1,
                            school_year = 2023,
                            semester_end_date = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            semester_name = "Spring",
                            semester_start_date = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            semester_id = 4,
                            batch_id = 3,
                            degree_level_id = 2,
                            school_year = 2022,
                            semester_end_date = new DateTime(2022, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            semester_name = "Fall",
                            semester_start_date = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            semester_id = 5,
                            batch_id = 2,
                            degree_level_id = 2,
                            school_year = 2022,
                            semester_end_date = new DateTime(2022, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            semester_name = "Summer",
                            semester_start_date = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            semester_id = 6,
                            batch_id = 1,
                            degree_level_id = 3,
                            school_year = 2022,
                            semester_end_date = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            semester_name = "Spring",
                            semester_start_date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BusinessObject.SemesterBatch", b =>
                {
                    b.Property<int>("semester_batch_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("semester_batch_id"), 1L, 1);

                    b.Property<int>("batch_id")
                        .HasColumnType("int");

                    b.Property<string>("degree_level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("semester_id")
                        .HasColumnType("int");

                    b.Property<int?>("term_no")
                        .HasColumnType("int");

                    b.HasKey("semester_batch_id");

                    b.HasIndex("batch_id");

                    b.HasIndex("semester_id");

                    b.ToTable("SemesterBatch");
                });

            modelBuilder.Entity("BusinessObject.SemesterPlan", b =>
                {
                    b.Property<int>("semester_id")
                        .HasColumnType("int");

                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.Property<int?>("term_no")
                        .HasColumnType("int");

                    b.HasKey("semester_id", "curriculum_id");

                    b.HasIndex("curriculum_id");

                    b.ToTable("SemesterPlan");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.Property<int>("schedule_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("schedule_id"), 1L, 1);

                    b.Property<string>("CLO_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ITU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IVQ")
                        .HasColumnType("real");

                    b.Property<float>("ass_defense")
                        .HasColumnType("real");

                    b.Property<float>("assigment")
                        .HasColumnType("real");

                    b.Property<int>("class_session_type_id")
                        .HasColumnType("int");

                    b.Property<float>("eos_exam")
                        .HasColumnType("real");

                    b.Property<string>("lecturer_material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lecturer_material_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("online_lab")
                        .HasColumnType("real");

                    b.Property<float>("online_test")
                        .HasColumnType("real");

                    b.Property<float>("remote_learning")
                        .HasColumnType("real");

                    b.Property<string>("schedule_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("schedule_lecturer_task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("schedule_student_task")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("session_No")
                        .HasColumnType("int");

                    b.Property<string>("student_material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("student_material_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.Property<float>("video_learning")
                        .HasColumnType("real");

                    b.HasKey("schedule_id");

                    b.HasIndex("class_session_type_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("BusinessObject.SessionCLO", b =>
                {
                    b.Property<int>("CLO_id")
                        .HasColumnType("int");

                    b.Property<int>("session_id")
                        .HasColumnType("int");

                    b.HasKey("CLO_id", "session_id");

                    b.HasIndex("session_id");

                    b.ToTable("SessionCLO");
                });

            modelBuilder.Entity("BusinessObject.Specialization", b =>
                {
                    b.Property<int>("specialization_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("specialization_id"), 1L, 1);

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("major_id")
                        .HasColumnType("int");

                    b.Property<int>("semester_id")
                        .HasColumnType("int");

                    b.Property<string>("specialization_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization_english_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("specialization_id");

                    b.HasIndex("major_id");

                    b.HasIndex("semester_id");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            specialization_id = 1,
                            is_active = true,
                            major_id = 1,
                            semester_id = 2,
                            specialization_code = "6216432",
                            specialization_english_name = "Interior and Exterior Design",
                            specialization_name = "Thiết kế nội và ngoại thất"
                        },
                        new
                        {
                            specialization_id = 2,
                            is_active = true,
                            major_id = 1,
                            semester_id = 1,
                            specialization_code = "6215463",
                            specialization_english_name = "Film Making and Advertising",
                            specialization_name = "Dựng phim và quảng cáo"
                        },
                        new
                        {
                            specialization_id = 3,
                            is_active = true,
                            major_id = 1,
                            semester_id = 3,
                            specialization_code = "6526432",
                            specialization_english_name = "Interior and Exterior Design",
                            specialization_name = "Thiết kế nội và ngoại thất"
                        },
                        new
                        {
                            specialization_id = 4,
                            is_active = true,
                            major_id = 2,
                            semester_id = 4,
                            specialization_code = "6764432",
                            specialization_english_name = "Software Engineering",
                            specialization_name = "kĩ thuật phần mềm"
                        },
                        new
                        {
                            specialization_id = 5,
                            is_active = true,
                            major_id = 2,
                            semester_id = 5,
                            specialization_code = "6266132",
                            specialization_english_name = "Web Programming",
                            specialization_name = "lập trình web"
                        },
                        new
                        {
                            specialization_id = 6,
                            is_active = true,
                            major_id = 4,
                            semester_id = 6,
                            specialization_code = "6276545",
                            specialization_english_name = "Game Programming",
                            specialization_name = "lập trình game"
                        });
                });

            modelBuilder.Entity("BusinessObject.SpecializationSubject", b =>
                {
                    b.Property<int>("specialization_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("specialization_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("SpecializationSubject");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.Property<int>("subject_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("subject_id"), 1L, 1);

                    b.Property<int>("assessment_method_id")
                        .HasColumnType("int");

                    b.Property<int>("credit")
                        .HasColumnType("int");

                    b.Property<string>("english_subject_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("exam_total")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("learning_method_id")
                        .HasColumnType("int");

                    b.Property<string>("subject_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("total_time")
                        .HasColumnType("int");

                    b.Property<int>("total_time_class")
                        .HasColumnType("int");

                    b.HasKey("subject_id");

                    b.HasIndex("assessment_method_id");

                    b.HasIndex("learning_method_id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            subject_id = 1,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Project Capstone",
                            exam_total = 3,
                            is_active = true,
                            learning_method_id = 1,
                            subject_code = "SEP490",
                            subject_name = "Đồ án",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 2,
                            assessment_method_id = 2,
                            credit = 3,
                            english_subject_name = "Mac-Lenin philosophy",
                            exam_total = 5,
                            is_active = true,
                            learning_method_id = 1,
                            subject_code = "MLN131",
                            subject_name = "Triết học Mac-Lenin",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 3,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Soft Skill Group",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "SSG104",
                            subject_name = "Kĩ năng trong làm việc nhóm",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 4,
                            assessment_method_id = 2,
                            credit = 3,
                            english_subject_name = "Web api using asp.Net",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "PRN231",
                            subject_name = "lập trình web api asp.Net",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 5,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Basic Game Programing",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "PRU211",
                            subject_name = "lập trình game cơ bản",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 6,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Mathematics",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MAT101",
                            subject_name = "Toán học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 7,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Physics",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "PHY101",
                            subject_name = "Vật lý",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 8,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Chemistry",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "CHE101",
                            subject_name = "Hóa học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 9,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Biology",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "BIO101",
                            subject_name = "Sinh học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 10,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Linguistics",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "LING101",
                            subject_name = "Ngôn ngữ học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 11,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "English and Literature",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ENG101",
                            subject_name = "Tiếng Anh và văn học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 12,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "History",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "HIS101",
                            subject_name = "Lịch sử",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 13,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Political Science",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "POL101",
                            subject_name = "Khoa học chính trị",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 14,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Social Science",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "SOC101",
                            subject_name = "Khoa học xã hội",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 15,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Economics",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ECO101",
                            subject_name = "Kinh tế học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 16,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Business Management",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "BUS101",
                            subject_name = "Quản trị kinh doanh",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 17,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Finance",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "FIN101",
                            subject_name = "Tài chính",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 18,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Information Systems",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "IT101",
                            subject_name = "Hệ thống thông tin",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 19,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Computer Science",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "CS101",
                            subject_name = "Công nghệ thông tin",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 20,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Mechanical Engineering",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MECH101",
                            subject_name = "Cơ khí học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 21,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Electronics and Electrical Engineering",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ELEC101",
                            subject_name = "Điện tử và điện lạnh",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 22,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Architecture",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ARCH101",
                            subject_name = "Kiến trúc",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 23,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Art and Design",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ART101",
                            subject_name = "Nghệ thuật và thiết kế",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 24,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Music and Performing Arts",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MUSIC101",
                            subject_name = "Âm nhạc và nghệ thuật biểu diễn",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 25,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Foreign Language",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "FOREIGN101",
                            subject_name = "Ngôn ngữ nước ngoài",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 26,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Geography",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "GEO101",
                            subject_name = "Địa lý",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 27,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Environmental Science",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ENV101",
                            subject_name = "Môi trường học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 28,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Psychology",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "PSY101",
                            subject_name = "Tâm lý học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 29,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Antropology",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ANTH101",
                            subject_name = "Antropology",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 30,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Economics 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ECO102",
                            subject_name = "Kinh tế học 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 31,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Business Management 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "BUS102",
                            subject_name = "Quản trị kinh doanh 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 32,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Finance 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "FIN102",
                            subject_name = "Tài chính 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 33,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Information Systems 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "IT102",
                            subject_name = "Hệ thống thông tin 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 34,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Computer Science 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "CS102",
                            subject_name = "Công nghệ thông tin 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 35,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Mechanical Engineering 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MECH102",
                            subject_name = "Cơ khí học 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 36,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Electronics and Electrical Engineering 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ELEC102",
                            subject_name = "Điện tử và điện lạnh 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 37,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Architecture 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ARCH102",
                            subject_name = "Kiến trúc 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 38,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Art and Design 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ART102",
                            subject_name = "Nghệ thuật và thiết kế 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 39,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Music and Performing Arts 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MUSIC102",
                            subject_name = "Âm nhạc và nghệ thuật biểu diễn 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 40,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Foreign Language 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "FOREIGN102",
                            subject_name = "Ngôn ngữ nước ngoài 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 41,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Philosophy",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "PHILO101",
                            subject_name = "Triết học",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 42,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Psychology 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "PSYCH102",
                            subject_name = "Tâm lý học 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 43,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Linguistics 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "LING102",
                            subject_name = "Ngôn ngữ học 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 44,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "English and Literature 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ENG102",
                            subject_name = "Tiếng Anh và văn học 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 45,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Geography 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "GEO102",
                            subject_name = "Địa lý 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 46,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Environmental Science 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ENV102",
                            subject_name = "Môi trường học 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 47,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Antropology 2",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ANTH102",
                            subject_name = "Antropology 2",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 48,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Economics 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ECO103",
                            subject_name = "Kinh tế học 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 49,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Business Management 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "BUS103",
                            subject_name = "Quản trị kinh doanh 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 50,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Finance 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "FIN103",
                            subject_name = "Tài chính 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 51,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Information Systems 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "IT103",
                            subject_name = "Hệ thống thông tin 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 52,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Computer Science 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "CS103",
                            subject_name = "Công nghệ thông tin 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 53,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Mechanical Engineering 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MECH103",
                            subject_name = "Cơ khí học 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 54,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Electronics and Electrical Engineering 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ELEC103",
                            subject_name = "Điện tử và điện lạnh 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 55,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Architecture 3",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "ARCH103",
                            subject_name = "Kiến trúc 3",
                            total_time = 70,
                            total_time_class = 40
                        },
                        new
                        {
                            subject_id = 56,
                            assessment_method_id = 1,
                            credit = 3,
                            english_subject_name = "Image Design using Photoshop",
                            exam_total = 4,
                            is_active = true,
                            learning_method_id = 2,
                            subject_code = "MUL1013",
                            subject_name = "Thiết kế hình ảnh với Photoshop",
                            total_time = 70,
                            total_time_class = 40
                        });
                });

            modelBuilder.Entity("BusinessObject.Syllabus", b =>
                {
                    b.Property<int>("syllabus_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("syllabus_id"), 1L, 1);

                    b.Property<DateTime?>("approved_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("decision_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("degree_level_id")
                        .HasColumnType("int");

                    b.Property<string>("document_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("min_GPA_to_pass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("scoring_scale")
                        .HasColumnType("int");

                    b.Property<string>("student_task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.Property<bool>("syllabus_approved")
                        .HasColumnType("bit");

                    b.Property<string>("syllabus_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("syllabus_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("syllabus_status")
                        .HasColumnType("bit");

                    b.Property<string>("syllabus_tool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time_allocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("syllabus_id");

                    b.HasIndex("degree_level_id");

                    b.HasIndex("subject_id");

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("user_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_phone")
                        .HasColumnType("int");

                    b.HasKey("user_id");

                    b.HasIndex("role_id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            full_name = "Chu Quang Quan",
                            is_active = true,
                            role_id = 1,
                            user_email = "chuquan2k1@gmail.com",
                            user_name = "QuanCQ",
                            user_password = "quan123"
                        },
                        new
                        {
                            user_id = 2,
                            full_name = "Nguyen Thi Thu",
                            is_active = true,
                            role_id = 2,
                            user_email = "nguyenthu120801@gmail.com",
                            user_name = "ThuNT",
                            user_password = "quan123"
                        },
                        new
                        {
                            user_id = 3,
                            full_name = "Nguyen Phong Hao",
                            is_active = true,
                            role_id = 1,
                            user_email = "haotest@gmail.com",
                            user_name = "admin",
                            user_password = "quan123"
                        },
                        new
                        {
                            user_id = 4,
                            full_name = "Lam",
                            is_active = true,
                            role_id = 3,
                            user_email = "lam@gmail.com",
                            user_name = "lam",
                            user_password = "lam123"
                        });
                });

            modelBuilder.Entity("BusinessObject.AssessmentMethod", b =>
                {
                    b.HasOne("BusinessObject.AssessmentType", "AssessmentType")
                        .WithMany("assessment_methods")
                        .HasForeignKey("assessment_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentType");
                });

            modelBuilder.Entity("BusinessObject.CLO", b =>
                {
                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("CLOs")
                        .HasForeignKey("syllabus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.Combo", b =>
                {
                    b.HasOne("BusinessObject.Specialization", "Specialization")
                        .WithMany("Combos")
                        .HasForeignKey("specialization_id")
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BusinessObject.ComboCurriculum", b =>
                {
                    b.HasOne("BusinessObject.Combo", "Combo")
                        .WithMany("ComboCurriculum")
                        .HasForeignKey("combo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("ComboCurriculum")
                        .HasForeignKey("curriculum_id")
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("BusinessObject.Curriculum", b =>
                {
                    b.HasOne("BusinessObject.Batch", "Batch")
                        .WithMany("Curriculums")
                        .HasForeignKey("batch_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Specialization", "Specialization")
                        .WithMany("Curriculums")
                        .HasForeignKey("specialization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BusinessObject.CurriculumSubject", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.GradingCLO", b =>
                {
                    b.HasOne("BusinessObject.CLO", "CLO")
                        .WithMany("GradingCLOs")
                        .HasForeignKey("CLO_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.GradingStruture", "GradingStruture")
                        .WithMany("GradingCLOs")
                        .HasForeignKey("grading_id")
                        .IsRequired();

                    b.Navigation("CLO");

                    b.Navigation("GradingStruture");
                });

            modelBuilder.Entity("BusinessObject.GradingStruture", b =>
                {
                    b.HasOne("BusinessObject.AssessmentMethod", "AssessmentMethod")
                        .WithMany("GradingStrutures")
                        .HasForeignKey("assessment_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("Gradings")
                        .HasForeignKey("syllabus_id")
                        .IsRequired();

                    b.Navigation("AssessmentMethod");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.Major", b =>
                {
                    b.HasOne("BusinessObject.DegreeLevel", "DegreeLevel")
                        .WithMany("Majors")
                        .HasForeignKey("degree_level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeLevel");
                });

            modelBuilder.Entity("BusinessObject.Material", b =>
                {
                    b.HasOne("BusinessObject.LearningResource", "LearningResource")
                        .WithMany("Material")
                        .HasForeignKey("learning_resource_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("Materials")
                        .HasForeignKey("syllabus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningResource");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.PLOMapping", b =>
                {
                    b.HasOne("BusinessObject.PLOs", "PLOs")
                        .WithMany("PLOMappings")
                        .HasForeignKey("PLO_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("PLOMappings")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PLOs");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.PLOs", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("PLOs")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("BusinessObject.PreRequisite", b =>
                {
                    b.HasOne("BusinessObject.PreRequisiteType", "PreRequisiteType")
                        .WithMany("PreRequisites")
                        .HasForeignKey("pre_requisite_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "PreSubject")
                        .WithMany()
                        .HasForeignKey("pre_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("PreRequisite")
                        .HasForeignKey("subject_id")
                        .IsRequired();

                    b.Navigation("PreRequisiteType");

                    b.Navigation("PreSubject");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Question", b =>
                {
                    b.HasOne("BusinessObject.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BusinessObject.Quiz", b =>
                {
                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("Quizzes")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Semester", b =>
                {
                    b.HasOne("BusinessObject.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("batch_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.DegreeLevel", "DegreeLevel")
                        .WithMany("Semesters")
                        .HasForeignKey("degree_level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("DegreeLevel");
                });

            modelBuilder.Entity("BusinessObject.SemesterBatch", b =>
                {
                    b.HasOne("BusinessObject.Batch", "Batch")
                        .WithMany("SemesterBatches")
                        .HasForeignKey("batch_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Semester", "Semester")
                        .WithMany("SemesterBatches")
                        .HasForeignKey("semester_id")
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BusinessObject.SemesterPlan", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("Semesters")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Semester", "Semester")
                        .WithMany("Semesters")
                        .HasForeignKey("semester_id")
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.HasOne("BusinessObject.ClassSessionType", "ClassSessionType")
                        .WithMany("Sessions")
                        .HasForeignKey("class_session_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("Sessions")
                        .HasForeignKey("syllabus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSessionType");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.SessionCLO", b =>
                {
                    b.HasOne("BusinessObject.CLO", "CLO")
                        .WithMany("SessionCLO")
                        .HasForeignKey("CLO_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Session", "Session")
                        .WithMany("SessionCLO")
                        .HasForeignKey("session_id")
                        .IsRequired();

                    b.Navigation("CLO");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BusinessObject.Specialization", b =>
                {
                    b.HasOne("BusinessObject.Major", "Major")
                        .WithMany("Specialization")
                        .HasForeignKey("major_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Semester", "Semester")
                        .WithMany("Specializations")
                        .HasForeignKey("semester_id")
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BusinessObject.SpecializationSubject", b =>
                {
                    b.HasOne("BusinessObject.Specialization", "Specialization")
                        .WithMany("SpecializationSubjects")
                        .HasForeignKey("specialization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("SpecializationSubjects")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.HasOne("BusinessObject.AssessmentMethod", "AssessmentMethod")
                        .WithMany("Subjects")
                        .HasForeignKey("assessment_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.LearningMethod", "LearningMethod")
                        .WithMany("subjects")
                        .HasForeignKey("learning_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentMethod");

                    b.Navigation("LearningMethod");
                });

            modelBuilder.Entity("BusinessObject.Syllabus", b =>
                {
                    b.HasOne("BusinessObject.DegreeLevel", "DegreeLevel")
                        .WithMany("Syllabus")
                        .HasForeignKey("degree_level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("Syllabus")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DegreeLevel");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.AssessmentMethod", b =>
                {
                    b.Navigation("GradingStrutures");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("BusinessObject.AssessmentType", b =>
                {
                    b.Navigation("assessment_methods");
                });

            modelBuilder.Entity("BusinessObject.Batch", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("SemesterBatches");
                });

            modelBuilder.Entity("BusinessObject.ClassSessionType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("BusinessObject.CLO", b =>
                {
                    b.Navigation("GradingCLOs");

                    b.Navigation("SessionCLO");
                });

            modelBuilder.Entity("BusinessObject.Combo", b =>
                {
                    b.Navigation("ComboCurriculum");
                });

            modelBuilder.Entity("BusinessObject.Curriculum", b =>
                {
                    b.Navigation("ComboCurriculum");

                    b.Navigation("CurriculumSubjects");

                    b.Navigation("PLOs");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("BusinessObject.DegreeLevel", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("Semesters");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.GradingStruture", b =>
                {
                    b.Navigation("GradingCLOs");
                });

            modelBuilder.Entity("BusinessObject.LearningMethod", b =>
                {
                    b.Navigation("subjects");
                });

            modelBuilder.Entity("BusinessObject.LearningResource", b =>
                {
                    b.Navigation("Material");
                });

            modelBuilder.Entity("BusinessObject.Major", b =>
                {
                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BusinessObject.PLOs", b =>
                {
                    b.Navigation("PLOMappings");
                });

            modelBuilder.Entity("BusinessObject.PreRequisiteType", b =>
                {
                    b.Navigation("PreRequisites");
                });

            modelBuilder.Entity("BusinessObject.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Semester", b =>
                {
                    b.Navigation("SemesterBatches");

                    b.Navigation("Semesters");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.Navigation("SessionCLO");
                });

            modelBuilder.Entity("BusinessObject.Specialization", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Curriculums");

                    b.Navigation("SpecializationSubjects");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.Navigation("CurriculumSubjects");

                    b.Navigation("PLOMappings");

                    b.Navigation("PreRequisite");

                    b.Navigation("Quizzes");

                    b.Navigation("SpecializationSubjects");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.Syllabus", b =>
                {
                    b.Navigation("CLOs");

                    b.Navigation("Gradings");

                    b.Navigation("Materials");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
