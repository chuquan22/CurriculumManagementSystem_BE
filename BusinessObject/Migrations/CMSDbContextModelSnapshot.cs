// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(CMSDbContext))]
    partial class CMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.AssessmentMethod", b =>
                {
                    b.Property<int>("assessment_method_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assessment_method_id"), 1L, 1);

                    b.Property<string>("assessment_method_component")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("assessment_type_id")
                        .HasColumnType("int");

                    b.HasKey("assessment_method_id");

                    b.HasIndex("assessment_type_id");

                    b.ToTable("AssessmentMethod");

                    b.HasData(
                        new
                        {
                            assessment_method_id = 1,
                            assessment_method_component = "ABC",
                            assessment_type_id = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.AssessmentType", b =>
                {
                    b.Property<int>("assessment_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("assessment_type_id"), 1L, 1);

                    b.Property<string>("assessment_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("assessment_type_id");

                    b.ToTable("AssessmentType");

                    b.HasData(
                        new
                        {
                            assessment_type_id = 1,
                            assessment_type_name = "Online"
                        });
                });

            modelBuilder.Entity("BusinessObject.Batch", b =>
                {
                    b.Property<int>("batch_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("batch_id"), 1L, 1);

                    b.Property<string>("batch_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("batch_id");

                    b.ToTable("Batche");

                    b.HasData(
                        new
                        {
                            batch_id = 1,
                            batch_name = "K19.3"
                        },
                        new
                        {
                            batch_id = 2,
                            batch_name = "K18"
                        },
                        new
                        {
                            batch_id = 3,
                            batch_name = "K17"
                        });
                });

            modelBuilder.Entity("BusinessObject.ClassSessionType", b =>
                {
                    b.Property<int>("class_session_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("class_session_type_id"), 1L, 1);

                    b.Property<string>("class_session_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("class_session_type_id");

                    b.ToTable("ClassSessionType");
                });

            modelBuilder.Entity("BusinessObject.CLO", b =>
                {
                    b.Property<int>("CLO_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CLO_id"), 1L, 1);

                    b.Property<string>("CLO_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CLO_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.HasKey("CLO_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("CLO");
                });

            modelBuilder.Entity("BusinessObject.Combo", b =>
                {
                    b.Property<int>("combo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("combo_id"), 1L, 1);

                    b.Property<string>("combo_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("combo_english_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("combo_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("combo_no")
                        .HasColumnType("int");

                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("specialization_id")
                        .HasColumnType("int");

                    b.HasKey("combo_id");

                    b.HasIndex("curriculum_id");

                    b.HasIndex("specialization_id");

                    b.ToTable("Combo");
                });

            modelBuilder.Entity("BusinessObject.ComboSubject", b =>
                {
                    b.Property<int>("combo_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("combo_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("ComboSubject");
                });

            modelBuilder.Entity("BusinessObject.Curriculum", b =>
                {
                    b.Property<int>("curriculum_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("curriculum_id"), 1L, 1);

                    b.Property<DateTime>("approved_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("batch_id")
                        .HasColumnType("int");

                    b.Property<string>("curriculum_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("curriculum_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("curriculum_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("curriculum_status")
                        .HasColumnType("int");

                    b.Property<string>("decision_No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("english_curriculum_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("specialization_id")
                        .HasColumnType("int");

                    b.HasKey("curriculum_id");

                    b.HasIndex("batch_id");

                    b.HasIndex("specialization_id");

                    b.ToTable("Curriculum");

                    b.HasData(
                        new
                        {
                            curriculum_id = 1,
                            approved_date = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 1,
                            curriculum_code = "GD",
                            curriculum_description = "",
                            curriculum_name = "Thiết kế đồ họa",
                            curriculum_status = 1,
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Graphic Design",
                            specialization_id = 1
                        },
                        new
                        {
                            curriculum_id = 2,
                            approved_date = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            batch_id = 2,
                            curriculum_code = "SE",
                            curriculum_description = "",
                            curriculum_name = "kĩ sư phần mềm",
                            curriculum_status = 0,
                            decision_No = "360/QĐ-CĐFPL",
                            english_curriculum_name = "Software Engineering",
                            specialization_id = 4
                        });
                });

            modelBuilder.Entity("BusinessObject.CurriculumSubject", b =>
                {
                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.Property<int>("term_no")
                        .HasColumnType("int");

                    b.HasKey("curriculum_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("CurriculumSubject");
                });

            modelBuilder.Entity("BusinessObject.GradingCLO", b =>
                {
                    b.Property<int>("grading_id")
                        .HasColumnType("int");

                    b.Property<int>("CLO_id")
                        .HasColumnType("int");

                    b.HasKey("grading_id", "CLO_id");

                    b.HasIndex("CLO_id");

                    b.ToTable("GradingCLO");
                });

            modelBuilder.Entity("BusinessObject.GradingStruture", b =>
                {
                    b.Property<int>("grading_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("grading_id"), 1L, 1);

                    b.Property<int>("assessment_method_id")
                        .HasColumnType("int");

                    b.Property<string>("grading_duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("grading_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("grading_part")
                        .HasColumnType("int");

                    b.Property<decimal>("grading_weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("how_granding_structure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("minimum_value_to_meet_completion")
                        .HasColumnType("int");

                    b.Property<string>("scope_knowledge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.HasKey("grading_id");

                    b.HasIndex("assessment_method_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("GradingStruture");
                });

            modelBuilder.Entity("BusinessObject.LearningMethod", b =>
                {
                    b.Property<int>("learning_method_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("learning_method_id"), 1L, 1);

                    b.Property<string>("learning_method_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("learning_method_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("learning_method_id");

                    b.ToTable("LearningMethod");

                    b.HasData(
                        new
                        {
                            learning_method_id = 1,
                            learning_method_description = "",
                            learning_method_name = "Online Learing"
                        });
                });

            modelBuilder.Entity("BusinessObject.LearningResource", b =>
                {
                    b.Property<int>("learning_resource_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("learning_resource_id"), 1L, 1);

                    b.Property<string>("learning_resource_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("learning_resource_id");

                    b.ToTable("LearningResource");
                });

            modelBuilder.Entity("BusinessObject.Major", b =>
                {
                    b.Property<int>("major_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("major_id"), 1L, 1);

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("major_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("major_english_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("major_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("semester_id")
                        .HasColumnType("int");

                    b.HasKey("major_id");

                    b.HasIndex("semester_id");

                    b.ToTable("Major");

                    b.HasData(
                        new
                        {
                            major_id = 1,
                            is_active = true,
                            major_code = "GD",
                            major_english_name = "Graphic Design",
                            major_name = "Thiết kế đồ họa",
                            semester_id = 1
                        },
                        new
                        {
                            major_id = 2,
                            is_active = true,
                            major_code = "IT",
                            major_english_name = "Information technology",
                            major_name = "Công nghệ thông tin",
                            semester_id = 1
                        },
                        new
                        {
                            major_id = 3,
                            is_active = true,
                            major_code = "BA",
                            major_english_name = "Business Administration",
                            major_name = "Quản trị kinh doanh",
                            semester_id = 1
                        },
                        new
                        {
                            major_id = 4,
                            is_active = true,
                            major_code = "AE",
                            major_english_name = "Automation Engineering",
                            major_name = "Kỹ thuật tự động hóa",
                            semester_id = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Material", b =>
                {
                    b.Property<int>("material_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("material_id"), 1L, 1);

                    b.Property<int>("learning_resource_id")
                        .HasColumnType("int");

                    b.Property<string>("material_ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("material_published_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("material_publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("material_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.HasKey("material_id");

                    b.HasIndex("learning_resource_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("BusinessObject.PLOMapping", b =>
                {
                    b.Property<int>("PLO_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("PLO_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("PLOMapping");
                });

            modelBuilder.Entity("BusinessObject.PLOs", b =>
                {
                    b.Property<int>("PLO_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PLO_id"), 1L, 1);

                    b.Property<string>("PLO_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PLO_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.HasKey("PLO_id");

                    b.HasIndex("curriculum_id");

                    b.ToTable("PLOs");
                });

            modelBuilder.Entity("BusinessObject.PreRequisite", b =>
                {
                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.Property<int>("pre_subject_id")
                        .HasColumnType("int");

                    b.Property<string>("pre_requisite_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pre_requisite_type_id")
                        .HasColumnType("int");

                    b.HasKey("subject_id", "pre_subject_id");

                    b.HasIndex("pre_requisite_type_id");

                    b.HasIndex("pre_subject_id");

                    b.ToTable("PreRequisite");
                });

            modelBuilder.Entity("BusinessObject.PreRequisiteType", b =>
                {
                    b.Property<int>("pre_requisite_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pre_requisite_type_id"), 1L, 1);

                    b.Property<string>("pre_requisite_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pre_requisite_type_id");

                    b.ToTable("PreRequisiteType");
                });

            modelBuilder.Entity("BusinessObject.Question", b =>
                {
                    b.Property<int>("question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("question_id"), 1L, 1);

                    b.Property<string>("answers_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answers_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answers_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answers_4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("correct_answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quiz_id")
                        .HasColumnType("int");

                    b.HasKey("question_id");

                    b.HasIndex("quiz_id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("BusinessObject.Quiz", b =>
                {
                    b.Property<int>("quiz_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("quiz_id"), 1L, 1);

                    b.Property<string>("quiz_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("quiz_id");

                    b.HasIndex("subject_id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"), 1L, 1);

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("role_id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            role_id = 1,
                            role_name = "Dispatcher"
                        },
                        new
                        {
                            role_id = 2,
                            role_name = "Manager"
                        },
                        new
                        {
                            role_id = 3,
                            role_name = "Admin"
                        });
                });

            modelBuilder.Entity("BusinessObject.Semester", b =>
                {
                    b.Property<int>("semester_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("semester_id"), 1L, 1);

                    b.Property<int>("school_year")
                        .HasColumnType("int");

                    b.Property<DateTime>("semester_end_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("semester_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("semester_start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("semester_id");

                    b.ToTable("Semester");

                    b.HasData(
                        new
                        {
                            semester_id = 1,
                            school_year = 2023,
                            semester_end_date = new DateTime(2023, 10, 10, 3, 5, 34, 607, DateTimeKind.Local).AddTicks(3338),
                            semester_name = "Fall",
                            semester_start_date = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BusinessObject.SemesterPlan", b =>
                {
                    b.Property<int>("semester_id")
                        .HasColumnType("int");

                    b.Property<int>("curriculum_id")
                        .HasColumnType("int");

                    b.Property<string>("semester_plan_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("semester_plan_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("term_no")
                        .HasColumnType("int");

                    b.HasKey("semester_id", "curriculum_id");

                    b.HasIndex("curriculum_id");

                    b.ToTable("SemesterPlan");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.Property<int>("schedule_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("schedule_id"), 1L, 1);

                    b.Property<string>("ITU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IVQ")
                        .HasColumnType("int");

                    b.Property<int>("ass_defense")
                        .HasColumnType("int");

                    b.Property<int>("assigment")
                        .HasColumnType("int");

                    b.Property<int>("class_session_type_id")
                        .HasColumnType("int");

                    b.Property<int>("eos_exam")
                        .HasColumnType("int");

                    b.Property<string>("lecturer_material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lecturer_material_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("online_lab")
                        .HasColumnType("int");

                    b.Property<int>("online_test")
                        .HasColumnType("int");

                    b.Property<int>("remote_learning")
                        .HasColumnType("int");

                    b.Property<string>("schedule_content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("schedule_lecturer_task")
                        .HasColumnType("bigint");

                    b.Property<long>("schedule_student_task")
                        .HasColumnType("bigint");

                    b.Property<string>("student_material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("student_material_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_id")
                        .HasColumnType("int");

                    b.Property<int>("video_learning")
                        .HasColumnType("int");

                    b.HasKey("schedule_id");

                    b.HasIndex("class_session_type_id");

                    b.HasIndex("syllabus_id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("BusinessObject.SessionCLO", b =>
                {
                    b.Property<int>("CLO_id")
                        .HasColumnType("int");

                    b.Property<int>("session_id")
                        .HasColumnType("int");

                    b.HasKey("CLO_id", "session_id");

                    b.HasIndex("session_id");

                    b.ToTable("SessionCLO");
                });

            modelBuilder.Entity("BusinessObject.Specialization", b =>
                {
                    b.Property<int>("specialization_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("specialization_id"), 1L, 1);

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("major_id")
                        .HasColumnType("int");

                    b.Property<string>("specialization_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization_english_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("specialization_id");

                    b.HasIndex("major_id");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            specialization_id = 1,
                            is_active = true,
                            major_id = 1,
                            specialization_code = "IED",
                            specialization_english_name = "Interior and exterior design",
                            specialization_name = "Thiết kế nội và ngoại thất"
                        },
                        new
                        {
                            specialization_id = 2,
                            is_active = true,
                            major_id = 1,
                            specialization_code = "FMA",
                            specialization_english_name = "Filmmaking and advertising",
                            specialization_name = "Dựng phim và quảng cáo"
                        },
                        new
                        {
                            specialization_id = 3,
                            is_active = true,
                            major_id = 1,
                            specialization_code = "IED",
                            specialization_english_name = "Interior and exterior design",
                            specialization_name = "Thiết kế nội và ngoại thất"
                        },
                        new
                        {
                            specialization_id = 4,
                            is_active = true,
                            major_id = 2,
                            specialization_code = "SE",
                            specialization_english_name = "Software Engineering",
                            specialization_name = "kĩ thuật phần mềm"
                        },
                        new
                        {
                            specialization_id = 5,
                            is_active = true,
                            major_id = 2,
                            specialization_code = "WP",
                            specialization_english_name = "web programming",
                            specialization_name = "lập trình web"
                        },
                        new
                        {
                            specialization_id = 6,
                            is_active = true,
                            major_id = 2,
                            specialization_code = "GP",
                            specialization_english_name = "game programming",
                            specialization_name = "lập trình game"
                        });
                });

            modelBuilder.Entity("BusinessObject.SpecializationSubject", b =>
                {
                    b.Property<int>("specialization_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("specialization_id", "subject_id");

                    b.HasIndex("subject_id");

                    b.ToTable("SpecializationSubject");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.Property<int>("subject_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("subject_id"), 1L, 1);

                    b.Property<int>("assessment_method_id")
                        .HasColumnType("int");

                    b.Property<int>("credit")
                        .HasColumnType("int");

                    b.Property<string>("english_subject_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("exam_total")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("learning_method_id")
                        .HasColumnType("int");

                    b.Property<string>("option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("total_time")
                        .HasColumnType("int");

                    b.Property<int>("total_time_class")
                        .HasColumnType("int");

                    b.HasKey("subject_id");

                    b.HasIndex("assessment_method_id");

                    b.HasIndex("learning_method_id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            subject_id = 1,
                            assessment_method_id = 1,
                            credit = 10,
                            english_subject_name = "Project Capstone",
                            exam_total = 3,
                            is_active = true,
                            learning_method_id = 1,
                            option = "abc",
                            subject_code = "SEP490",
                            subject_name = "Đồ án",
                            total_time = 70,
                            total_time_class = 40
                        });
                });

            modelBuilder.Entity("BusinessObject.Syllabus", b =>
                {
                    b.Property<int>("syllabus_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("syllabus_id"), 1L, 1);

                    b.Property<DateTime>("approved_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("decision_No")
                        .HasColumnType("int");

                    b.Property<int>("degree_level")
                        .HasColumnType("int");

                    b.Property<string>("document_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("min_GPA_to_pass")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("scoring_scale")
                        .HasColumnType("int");

                    b.Property<string>("student_task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.Property<string>("syllabus_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("syllabus_note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("syllabus_status")
                        .HasColumnType("int");

                    b.Property<string>("syllabus_tool")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("syllabus_id");

                    b.HasIndex("subject_id");

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("user_id");

                    b.HasIndex("role_id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            full_name = "Chu Quang Quan",
                            is_active = true,
                            role_id = 1,
                            user_email = "chuquan2k1@gmail.com",
                            user_name = "QuanCQ"
                        },
                        new
                        {
                            user_id = 2,
                            full_name = "Nguyen Thi Thu",
                            is_active = true,
                            role_id = 2,
                            user_email = "nguyenthu120801@gmail.com",
                            user_name = "ThuNT"
                        },
                        new
                        {
                            user_id = 3,
                            full_name = "Nguyen Phong Hao",
                            is_active = true,
                            role_id = 1,
                            user_email = "haotest@gmail.com",
                            user_name = "admin"
                        });
                });

            modelBuilder.Entity("BusinessObject.AssessmentMethod", b =>
                {
                    b.HasOne("BusinessObject.AssessmentType", "AssessmentType")
                        .WithMany("assessment_methods")
                        .HasForeignKey("assessment_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentType");
                });

            modelBuilder.Entity("BusinessObject.CLO", b =>
                {
                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("CLOs")
                        .HasForeignKey("syllabus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.Combo", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("Combos")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Specialization", "Specialization")
                        .WithMany("Combos")
                        .HasForeignKey("specialization_id")
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BusinessObject.ComboSubject", b =>
                {
                    b.HasOne("BusinessObject.Combo", "Combo")
                        .WithMany("comboSubjects")
                        .HasForeignKey("combo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("ComboSubjects")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Curriculum", b =>
                {
                    b.HasOne("BusinessObject.Batch", "Batch")
                        .WithMany("Curriculums")
                        .HasForeignKey("batch_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Specialization", "Specialization")
                        .WithMany("Curriculums")
                        .HasForeignKey("specialization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BusinessObject.CurriculumSubject", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.GradingCLO", b =>
                {
                    b.HasOne("BusinessObject.CLO", "CLO")
                        .WithMany("GradingCLOs")
                        .HasForeignKey("CLO_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.GradingStruture", "GradingStruture")
                        .WithMany("GradingCLOs")
                        .HasForeignKey("grading_id")
                        .IsRequired();

                    b.Navigation("CLO");

                    b.Navigation("GradingStruture");
                });

            modelBuilder.Entity("BusinessObject.GradingStruture", b =>
                {
                    b.HasOne("BusinessObject.AssessmentMethod", "AssessmentMethod")
                        .WithMany("GradingStrutures")
                        .HasForeignKey("assessment_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("Gradings")
                        .HasForeignKey("syllabus_id")
                        .IsRequired();

                    b.Navigation("AssessmentMethod");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.Major", b =>
                {
                    b.HasOne("BusinessObject.Semester", "Semester")
                        .WithMany("Majors")
                        .HasForeignKey("semester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BusinessObject.Material", b =>
                {
                    b.HasOne("BusinessObject.LearningResource", "LearningResource")
                        .WithMany("Material")
                        .HasForeignKey("learning_resource_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("Materials")
                        .HasForeignKey("syllabus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningResource");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.PLOMapping", b =>
                {
                    b.HasOne("BusinessObject.PLOs", "PLOs")
                        .WithMany("PLOMappings")
                        .HasForeignKey("PLO_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("PLOMappings")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PLOs");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.PLOs", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("PLOs")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("BusinessObject.PreRequisite", b =>
                {
                    b.HasOne("BusinessObject.PreRequisiteType", "PreRequisiteType")
                        .WithMany("PreRequisites")
                        .HasForeignKey("pre_requisite_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "PreSubject")
                        .WithMany()
                        .HasForeignKey("pre_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("PreRequisite")
                        .HasForeignKey("subject_id")
                        .IsRequired();

                    b.Navigation("PreRequisiteType");

                    b.Navigation("PreSubject");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Question", b =>
                {
                    b.HasOne("BusinessObject.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BusinessObject.Quiz", b =>
                {
                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("Quizzes")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.SemesterPlan", b =>
                {
                    b.HasOne("BusinessObject.Curriculum", "Curriculum")
                        .WithMany("Semesters")
                        .HasForeignKey("curriculum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Semester", "Semester")
                        .WithMany("semesters")
                        .HasForeignKey("semester_id")
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.HasOne("BusinessObject.ClassSessionType", "ClassSessionType")
                        .WithMany("Sessions")
                        .HasForeignKey("class_session_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Syllabus", "Syllabus")
                        .WithMany("Sessions")
                        .HasForeignKey("syllabus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSessionType");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.SessionCLO", b =>
                {
                    b.HasOne("BusinessObject.CLO", "CLO")
                        .WithMany("SessionCLO")
                        .HasForeignKey("CLO_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Session", "Session")
                        .WithMany("SessionCLO")
                        .HasForeignKey("session_id")
                        .IsRequired();

                    b.Navigation("CLO");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BusinessObject.Specialization", b =>
                {
                    b.HasOne("BusinessObject.Major", "Major")
                        .WithMany("Specialization")
                        .HasForeignKey("major_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("BusinessObject.SpecializationSubject", b =>
                {
                    b.HasOne("BusinessObject.Specialization", "Specialization")
                        .WithMany("SpecializationSubjects")
                        .HasForeignKey("specialization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("SpecializationSubjects")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.HasOne("BusinessObject.AssessmentMethod", "AssessmentMethod")
                        .WithMany("Subjects")
                        .HasForeignKey("assessment_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.LearningMethod", "LearningMethod")
                        .WithMany("subjects")
                        .HasForeignKey("learning_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentMethod");

                    b.Navigation("LearningMethod");
                });

            modelBuilder.Entity("BusinessObject.Syllabus", b =>
                {
                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("Syllabus")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.AssessmentMethod", b =>
                {
                    b.Navigation("GradingStrutures");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("BusinessObject.AssessmentType", b =>
                {
                    b.Navigation("assessment_methods");
                });

            modelBuilder.Entity("BusinessObject.Batch", b =>
                {
                    b.Navigation("Curriculums");
                });

            modelBuilder.Entity("BusinessObject.ClassSessionType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("BusinessObject.CLO", b =>
                {
                    b.Navigation("GradingCLOs");

                    b.Navigation("SessionCLO");
                });

            modelBuilder.Entity("BusinessObject.Combo", b =>
                {
                    b.Navigation("comboSubjects");
                });

            modelBuilder.Entity("BusinessObject.Curriculum", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("CurriculumSubjects");

                    b.Navigation("PLOs");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("BusinessObject.GradingStruture", b =>
                {
                    b.Navigation("GradingCLOs");
                });

            modelBuilder.Entity("BusinessObject.LearningMethod", b =>
                {
                    b.Navigation("subjects");
                });

            modelBuilder.Entity("BusinessObject.LearningResource", b =>
                {
                    b.Navigation("Material");
                });

            modelBuilder.Entity("BusinessObject.Major", b =>
                {
                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BusinessObject.PLOs", b =>
                {
                    b.Navigation("PLOMappings");
                });

            modelBuilder.Entity("BusinessObject.PreRequisiteType", b =>
                {
                    b.Navigation("PreRequisites");
                });

            modelBuilder.Entity("BusinessObject.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Semester", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("semesters");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.Navigation("SessionCLO");
                });

            modelBuilder.Entity("BusinessObject.Specialization", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Curriculums");

                    b.Navigation("SpecializationSubjects");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.Navigation("ComboSubjects");

                    b.Navigation("CurriculumSubjects");

                    b.Navigation("PLOMappings");

                    b.Navigation("PreRequisite");

                    b.Navigation("Quizzes");

                    b.Navigation("SpecializationSubjects");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("BusinessObject.Syllabus", b =>
                {
                    b.Navigation("CLOs");

                    b.Navigation("Gradings");

                    b.Navigation("Materials");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
